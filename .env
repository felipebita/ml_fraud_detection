# Project: Fraud Detection ML System
# Created: 2025-07-22
# Description: Environment variables for local development

# ============================================
# PROJECT CONFIGURATION
# ============================================
PROJECT_NAME="fraud-detection"
ENVIRONMENT="development"  # development, staging, production
DEBUG=true
LOG_LEVEL="INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL

# ============================================
# DATA PATHS
# ============================================
DATA_PATH="./data"
RAW_DATA_PATH="./data/raw"
PROCESSED_DATA_PATH="./data/processed"
FEATURE_STORE_PATH="./data/features"
MODEL_ARTIFACTS_PATH="./models/artifacts"

# Dataset specific (update with your dataset name)
DATASET_FILE="reduced_data.csv"
DATASET_URL=""  # If downloading from remote

# ============================================
# MLFLOW CONFIGURATION
# ============================================
MLFLOW_TRACKING_URI="duckdb:///mlflow.duckdb"
MLFLOW_ARTIFACT_ROOT="./mlruns"
MLFLOW_EXPERIMENT_NAME="fraud_detection_experiment"

# Optional: Separate DuckDB for analysis
ANALYTICS_DB_PATH="./analytics.duckdb"


# MLflow S3 artifact store (optional, for cloud deployment)
# MLFLOW_S3_ENDPOINT_URL="http://localhost:9000"  # For MinIO
# AWS_ACCESS_KEY_ID="minioadmin"
# AWS_SECRET_ACCESS_KEY="minioadmin"
# MLFLOW_ARTIFACT_ROOT="s3://mlflow-artifacts"

# ============================================
# MODEL CONFIGURATION - DEFAULT + OPTIMIZED
# ============================================
# Models to evaluate
MODELS_TO_TRAIN="naive_bayes,logistic_regression,random_forest,lgbm,knn,svm,mlp"
EVALUATE_WITH_SCALING=true
EVALUATE_WITHOUT_SCALING=true

# Cross-validation settings
CV_STRATEGY="stratified_kfold"  # OPTIMIZED: stratified preserves fraud ratio in each fold
CV_FOLDS=5
CV_SHUFFLE=true
CV_RANDOM_STATE=42

# Metrics to track
METRICS_TO_COMPUTE="balanced_accuracy,precision,recall,f1,kappa"
PRIMARY_METRIC="f1"  # OPTIMIZED: F1 balances precision/recall for imbalanced data

# ============================================
# MODEL PARAMETERS
# Format: DEFAULT VALUE | OPTIMIZED: explanation if changed
# ============================================

# Naive Bayes (GaussianNB)
NB_VAR_SMOOTHING=1e-9  # DEFAULT: sklearn default value

# Logistic Regression
LR_PENALTY="l2"        # DEFAULT: sklearn default
LR_C=1.0              # DEFAULT: sklearn default
LR_MAX_ITER=1000      # OPTIMIZED: 100 (default) often insufficient for convergence in fraud data
LR_SOLVER="lbfgs"     # DEFAULT: sklearn default
LR_CLASS_WEIGHT="balanced"  # OPTIMIZED: None (default) doesn't handle imbalanced fraud data well

# Random Forest
RF_N_ESTIMATORS=100        # DEFAULT: sklearn default
RF_MAX_DEPTH=20           # OPTIMIZED: None (default) can overfit; 20 provides good balance
RF_MIN_SAMPLES_SPLIT=20   # OPTIMIZED: 2 (default) too low for fraud; prevents overfitting
RF_MIN_SAMPLES_LEAF=10    # OPTIMIZED: 1 (default) too low; reduces model complexity
RF_MAX_FEATURES="sqrt"    # DEFAULT: sklearn default for classification
RF_CLASS_WEIGHT="balanced_subsample"  # OPTIMIZED: None (default) ignores class imbalance

# LightGBM
LGBM_BOOSTING_TYPE="gbdt"    # DEFAULT: LightGBM default
LGBM_N_ESTIMATORS=100        # DEFAULT: LightGBM default
LGBM_MAX_DEPTH=-1           # DEFAULT: -1 (no limit) - LightGBM uses num_leaves instead
LGBM_LEARNING_RATE=0.1      # DEFAULT: LightGBM default
LGBM_NUM_LEAVES=31          # DEFAULT: LightGBM default
LGBM_SUBSAMPLE=1.0          # DEFAULT: LightGBM default
LGBM_COLSAMPLE_BYTREE=1.0   # DEFAULT: LightGBM default
LGBM_IS_UNBALANCE=true      # OPTIMIZED: false (default) doesn't handle imbalanced data
LGBM_MIN_CHILD_SAMPLES=20   # DEFAULT: LightGBM default
LGBM_REG_ALPHA=0.0          # DEFAULT: LightGBM default (L1 regularization)
LGBM_REG_LAMBDA=0.0         # DEFAULT: LightGBM default (L2 regularization)

# KNN
KNN_N_NEIGHBORS=5         # DEFAULT: sklearn default
KNN_WEIGHTS="distance"    # OPTIMIZED: "uniform" (default) treats all neighbors equally; distance is better for fraud
KNN_METRIC="minkowski"    # DEFAULT: sklearn default
KNN_P=2                   # DEFAULT: sklearn default (2 = euclidean when metric='minkowski')
KNN_ALGORITHM="auto"      # DEFAULT: sklearn default

# SVM (SVC)
SVM_KERNEL="rbf"          # DEFAULT: sklearn default
SVM_C=1.0                 # DEFAULT: sklearn default
SVM_GAMMA="scale"         # DEFAULT: sklearn default
SVM_PROBABILITY=true      # OPTIMIZED: false (default) but we need probability scores for fraud detection
SVM_CLASS_WEIGHT="balanced"  # OPTIMIZED: None (default) doesn't handle imbalanced data
SVM_MAX_ITER=-1           # DEFAULT: -1 (no limit)
SVM_CACHE_SIZE=200        # DEFAULT: sklearn default (MB of memory)

# MLP (MLPClassifier)
MLP_HIDDEN_LAYER_SIZES="100"     # DEFAULT: (100,) - single hidden layer with 100 neurons
MLP_ACTIVATION="relu"             # DEFAULT: sklearn default
MLP_SOLVER="adam"                 # DEFAULT: sklearn default
MLP_ALPHA=0.0001                  # DEFAULT: sklearn default (L2 penalty)
MLP_BATCH_SIZE="auto"             # DEFAULT: sklearn default
MLP_LEARNING_RATE="constant"      # DEFAULT: sklearn default
MLP_LEARNING_RATE_INIT=0.001      # DEFAULT: sklearn default
MLP_MAX_ITER=1000                 # OPTIMIZED: 200 (default) often insufficient for fraud patterns
MLP_EARLY_STOPPING=true           # OPTIMIZED: false (default) but helps prevent overfitting
MLP_VALIDATION_FRACTION=0.1       # DEFAULT: sklearn default (when early_stopping=True)
MLP_N_ITER_NO_CHANGE=10          # DEFAULT: sklearn default (when early_stopping=True)

# ============================================
# SCALING CONFIGURATION
# ============================================
SCALER_TYPE="standard"  # OPTIMIZED: StandardScaler works well for most algorithms
SCALE_FEATURES=true
# Features to exclude from scaling (e.g., binary flags, one-hot encoded)
FEATURES_TO_EXCLUDE_FROM_SCALING=""  

# ============================================
# CLASS IMBALANCE HANDLING
# ============================================
# OPTIMIZED: Fraud datasets are typically highly imbalanced (1-2% fraud)
HANDLE_IMBALANCE=true
IMBALANCE_STRATEGY="class_weight"  # class_weight, smote, adasyn, none
SMOTE_SAMPLING_STRATEGY=0.3  # If using SMOTE: ratio of minority to majority after resampling

# ============================================
# OPTIMIZED GRID SEARCH PARAMETERS
# Focused on parameters that matter most for fraud detection
# ============================================
GRID_SEARCH_ENABLED=true
GRID_SEARCH_CV_FOLDS=5
GRID_SEARCH_SCORING="f1"
GRID_SEARCH_N_JOBS=-1
GRID_SEARCH_VERBOSE=2

# Naive Bayes - Limited parameters to tune
NAIVE_BAYES_PARAM_GRID='{"var_smoothing": [1e-10, 1e-9, 1e-8, 1e-7, 1e-6]}'

# Logistic Regression - Focus on regularization
LOGISTIC_REGRESSION_PARAM_GRID='{"C": [0.001, 0.01, 0.1, 1, 10, 100], "penalty": ["l1", "l2"], "solver": ["liblinear", "saga"], "class_weight": ["balanced", {"0": 1, "1": 2}, {"0": 1, "1": 5}]}'

# Random Forest - Key parameters for fraud detection
RANDOM_FOREST_PARAM_GRID='{"n_estimators": [100, 200, 300], "max_depth": [10, 20, 30, null], "min_samples_split": [10, 20, 50], "min_samples_leaf": [5, 10, 20], "class_weight": ["balanced", "balanced_subsample", {"0": 1, "1": 3}]}'

# LightGBM - Important parameters for boosting
LGBM_PARAM_GRID='{"n_estimators": [100, 200, 300], "num_leaves": [31, 50, 100], "learning_rate": [0.05, 0.1, 0.2], "min_child_samples": [20, 30, 50], "subsample": [0.8, 1.0], "colsample_bytree": [0.8, 1.0], "scale_pos_weight": [1, 5, 10]}'

# KNN - Distance-based parameters
KNN_PARAM_GRID='{"n_neighbors": [3, 5, 7, 9, 11, 15], "weights": ["uniform", "distance"], "metric": ["euclidean", "manhattan", "minkowski"], "p": [1, 2]}'

# SVM - Kernel and regularization  
SVM_PARAM_GRID='{"C": [0.1, 1, 10, 100], "gamma": ["scale", "auto", 0.001, 0.01, 0.1], "kernel": ["rbf", "poly", "sigmoid"], "class_weight": ["balanced", {"0": 1, "1": 3}, {"0": 1, "1": 5}]}'

# MLP - Architecture and regularization
MLP_PARAM_GRID='{"hidden_layer_sizes": [(100,), (200,), (100, 50), (150, 100, 50)], "activation": ["relu", "tanh"], "alpha": [0.0001, 0.001, 0.01], "learning_rate_init": [0.001, 0.01], "early_stopping": [true]}'

# ============================================
# FRAUD-SPECIFIC OPTIMIZATIONS
# ============================================
# Threshold optimization
OPTIMIZE_THRESHOLD=true  # OPTIMIZED: Find best threshold instead of using 0.5
THRESHOLD_SEARCH_RANGE="0.1,0.9,0.01"  # min,max,step

# Cost-sensitive learning
USE_COST_SENSITIVE_LEARNING=true  # OPTIMIZED: Important for fraud
FALSE_NEGATIVE_COST=100  # Missing a fraud is expensive
FALSE_POSITIVE_COST=1    # Investigating a false alarm is cheaper

# Feature importance threshold
MIN_FEATURE_IMPORTANCE=0.001  # OPTIMIZED: Keep features that contribute to fraud detection

# ============================================
# MEMORY AND PERFORMANCE OPTIMIZATION
# ============================================
# Some models (especially SVM) can be memory intensive
ENABLE_MEMORY_EFFICIENT_MODE=true
MAX_MEMORY_MB=8192  # Limit memory usage
USE_SPARSE_MATRICES=true  # When possible, for high-dimensional data

# Parallel processing
N_JOBS_MODEL_SPECIFIC=""  # Leave empty to use all cores, or specify number

# ============================================
# EXPERIMENT TRACKING
# ============================================
EXPERIMENT_NAME_PREFIX="fraud_detection"
TRACK_CONFUSION_MATRIX=true
TRACK_CLASSIFICATION_REPORT=true
TRACK_ROC_CURVE=true
TRACK_PRECISION_RECALL_CURVE=true
TRACK_FEATURE_IMPORTANCE=true  # Where applicable
SAVE_BEST_MODEL_ONLY=false  # Save all models during experimentation

# ============================================
# PERFORMANCE OPTIMIZATION FOR EXPERIMENTS
# ============================================
# Some models can be slow, these settings help
ENABLE_EARLY_STOPPING=true
EARLY_STOPPING_ROUNDS=50  # For LGBM
MAX_TRAINING_TIME_PER_MODEL=3600  # 1 hour max per model

# Memory optimization
REDUCE_MEMORY_USAGE=true
USE_FLOAT32=true  # Instead of float64

# Parallel processing
PARALLEL_MODEL_TRAINING=false  # Train models sequentially to avoid memory issues
PARALLEL_CV_FOLDS=true  # But parallelize CV folds

# ============================================
# FEATURE ENGINEERING
# ============================================
MAX_FEATURES=10
FEATURE_SELECTION_METHOD="mutual_info"  # mutual_info, rfe, lasso, none
FEATURE_IMPORTANCE_THRESHOLD=0.01
CREATE_POLYNOMIAL_FEATURES=false
POLYNOMIAL_DEGREE=2

# Time-based features
TIME_WINDOWS="1H,6H,24H,7D,30D"  # Time windows for aggregations
ENABLE_TIME_FEATURES=true

# ============================================
# DATABASE CONFIGURATION (if applicable)
# ============================================
DATABASE_URL="postgresql://user:password@localhost:5432/fraud_detection"
REDIS_URL="redis://localhost:6379/0"  # For caching

# Feature store database
FEATURE_STORE_URI="sqlite:///feature_store.db"
# FEATURE_STORE_URI="postgresql://user:password@localhost:5432/feature_store"

# ============================================
# API CONFIGURATION (for model serving)
# ============================================
API_HOST="0.0.0.0"
API_PORT=8000
API_WORKERS=4
API_RELOAD=true  # Set to false in production
API_CORS_ORIGINS="http://localhost:3000,http://localhost:8080"
API_SECRET_KEY="your-secret-key-here-change-in-production"

# Rate limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_PERIOD="1 minute"

# ============================================
# MONITORING & ALERTING
# ============================================
ENABLE_MONITORING=true
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000

# Model drift detection
DRIFT_DETECTION_ENABLED=true
DRIFT_CHECK_FREQUENCY="1 hour"
DRIFT_THRESHOLD=0.1

# Alerting
ALERT_EMAIL="your-email@example.com"
SLACK_WEBHOOK_URL=""
ALERT_ON_DRIFT=true
ALERT_ON_PERFORMANCE_DROP=true
PERFORMANCE_DROP_THRESHOLD=0.05  # 5% drop in F1 score

# ============================================
# SECURITY
# ============================================
ENCRYPT_SENSITIVE_FEATURES=true
ENCRYPTION_KEY="your-32-byte-encryption-key-here"  # Generate with: openssl rand -base64 32
HASH_CUSTOMER_IDS=true
REMOVE_PII=true

# ============================================
# CLOUD STORAGE (Optional)
# ============================================
# AWS S3
# AWS_REGION="us-east-1"
# S3_BUCKET_NAME="fraud-detection-models"
# S3_DATA_BUCKET="fraud-detection-data"

# Google Cloud Storage
# GCS_BUCKET_NAME="fraud-detection-models"
# GOOGLE_APPLICATION_CREDENTIALS="path/to/service-account-key.json"

# Azure Blob Storage
# AZURE_STORAGE_CONNECTION_STRING=""
# AZURE_CONTAINER_NAME="fraud-detection"

# ============================================
# EXPERIMENT TRACKING
# ============================================
EXPERIMENT_TRACKING_ENABLED=true
TRACK_DATA_STATS=true
TRACK_FEATURE_IMPORTANCE=true
TRACK_CONFUSION_MATRIX=true
TRACK_SHAP_VALUES=true
AUTO_LOG_METRICS=true

# ============================================
# HYPERPARAMETER TUNING
# ============================================
HYPERPARAM_TUNING_ENABLED=true
OPTUNA_N_TRIALS=100
OPTUNA_TIMEOUT=3600  # 1 hour
OPTUNA_N_JOBS=4  # Parallel trials
OPTUNA_STUDY_NAME="fraud_detection_optimization"
OPTUNA_STORAGE="sqlite:///optuna.db"

# ============================================
# DATA QUALITY
# ============================================
ENABLE_DATA_VALIDATION=true
GREAT_EXPECTATIONS_ROOT="./great_expectations"
DATA_QUALITY_CHECK_ON_TRAINING=true
DATA_QUALITY_CHECK_ON_INFERENCE=true

# ============================================
# DEVELOPMENT TOOLS
# ============================================
JUPYTER_PORT=8888
STREAMLIT_PORT=8501
NOTEBOOK_TOKEN="your-jupyter-token"

# ============================================
# PERFORMANCE OPTIMIZATION
# ============================================
USE_GPU=false  # Set to true if GPU available
N_JOBS=-1  # Number of parallel jobs (-1 = all cores)
CHUNK_SIZE=10000  # For batch processing
CACHE_ENABLED=true
CACHE_TTL=3600  # Cache time-to-live in seconds

# ============================================
# LOGGING
# ============================================
LOG_FORMAT="json"  # json or text
LOG_FILE_PATH="./logs/fraud_detection.log"
LOG_MAX_SIZE="100MB"
LOG_BACKUP_COUNT=5
LOG_TO_FILE=true
LOG_TO_CONSOLE=true
STRUCTURED_LOGGING=true

# ============================================
# TESTING
# ============================================
TEST_DATA_PATH="./tests/data/test_dataset.csv"
TEST_MODEL_PATH="./tests/models/test_model.pkl"
PYTEST_COVERAGE_THRESHOLD=80
RUN_INTEGRATION_TESTS=false  # Set to true in CI/CD

# ============================================
# BUSINESS RULES
# ============================================
# Cost matrix for fraud detection
FALSE_POSITIVE_COST=10  # Cost of investigating non-fraud
FALSE_NEGATIVE_COST=100  # Cost of missing fraud
TRUE_POSITIVE_REWARD=90  # Reward for catching fraud

# Transaction limits
MAX_TRANSACTION_AMOUNT=50000
MIN_TRANSACTION_AMOUNT=0.01
SUSPICIOUS_AMOUNT_THRESHOLD=10000

# Velocity checks
MAX_TRANSACTIONS_PER_HOUR=20
MAX_TRANSACTIONS_PER_DAY=100
MAX_AMOUNT_PER_DAY=25000