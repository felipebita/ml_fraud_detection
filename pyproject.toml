[project]
name = "fraud-detection"
version = "0.1.0"
description = "Production-ready ML fraud detection system with MLflow integration"
authors = [{name = "Felipe Martins", email = "febimartins@gmail.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11,<3.12"
keywords = ["fraud-detection", "machine-learning", "mlflow", "mlops"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
  # Core ML Libraries
  "numpy>=1.26.0,<2.0.0",
  "pandas>=2.2.0,<3.0.0",
  "scikit-learn>=1.4.0,<2.0.0",
  "xgboost>=2.0.0,<3.0.0",
  "lightgbm>=4.3.0,<5.0.0",
  "imbalanced-learn>=0.12.0,<1.0.0",
  
  # MLOps & Experiment Tracking
  "mlflow>=2.12.0,<3.0.0",
  "optuna>=3.5.0,<4.0.0",
  "optuna-integration>=3.5.0,<4.0.0",
  "duckdb>=0.10.0,<1.0.0",
  "sqlalchemy>=2.0.0,<3.0.0",
  "duckdb-engine>=0.12.0,<1.0.0",
  
  # Data Validation & Quality
  "pydantic>=2.6.0,<3.0.0",
  "pydantic-settings>=2.2.0,<3.0.0",
  "pandera>=0.18.0,<1.0.0",
  "great-expectations>=0.18.0,<1.0.0",
  
  # Feature Engineering
  "feature-engine>=1.6.0,<2.0.0",
  "category-encoders>=2.6.0,<3.0.0",
  
  # Model Interpretability
  "shap>=0.44.0,<1.0.0",
  "lime>=0.2.0,<1.0.0",
  
  # Visualization
  "matplotlib>=3.8.0,<4.0.0",
  "seaborn>=0.13.0,<1.0.0",
  "plotly>=5.19.0,<6.0.0",
  
  # Configuration & Logging
  "python-dotenv>=1.0.0,<2.0.0",
  "pyyaml>=6.0,<7.0",
  "structlog>=24.1.0,<25.0.0",
  "rich>=13.7.0,<14.0.0",
  
  # Data Storage & Serialization
  "joblib>=1.3.0,<2.0.0",
  "pyarrow>=15.0.0,<16.0.0",
  "fastparquet>=2024.2.0",
  
  # API & Serving (for future use)
  "fastapi>=0.110.0,<1.0.0",
  "uvicorn>=0.27.0,<1.0.0",
  "httpx>=0.27.0,<1.0.0",
  
  # Utilities
  "click>=8.1.0,<9.0.0",
  "tqdm>=4.66.0,<5.0.0",
  "python-dateutil>=2.9.0,<3.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
  # Testing
  "pytest>=8.0.0,<9.0.0",
  "pytest-cov>=4.1.0,<5.0.0",
  "pytest-xdist>=3.5.0,<4.0.0",
  "pytest-mock>=3.12.0,<4.0.0",
  "pytest-asyncio>=0.23.0,<1.0.0",
  "hypothesis>=6.98.0,<7.0.0",
  
  # Code Quality
  "black>=24.2.0,<25.0.0",
  "ruff>=0.3.0,<1.0.0",
  "mypy>=1.9.0,<2.0.0",
  "isort>=5.13.0,<6.0.0",
  
  # Type Stubs
  "pandas-stubs>=2.1.0,<3.0.0",
  "types-PyYAML>=6.0.0,<7.0.0",
  "types-requests>=2.31.0,<3.0.0",
  "types-python-dateutil>=2.9.0,<3.0.0",
  
  # Documentation
  "mkdocs>=1.5.0,<2.0.0",
  "mkdocs-material>=9.5.0,<10.0.0",
  "mkdocstrings[python]>=0.24.0,<1.0.0",
  
  # Pre-commit
  "pre-commit>=3.6.0,<4.0.0",
  
  # Security
  "bandit>=1.7.0,<2.0.0",
  "safety>=3.0.0,<4.0.0",
]

# Notebook dependencies
notebook = [
  "jupyter>=1.0.0,<2.0.0",
  "jupyterlab>=4.1.0,<5.0.0",
  "ipykernel>=6.29.0,<7.0.0",
  "ipywidgets>=8.1.0,<9.0.0",
  "nbformat>=5.9.0,<6.0.0",
  "nbconvert>=7.16.0,<8.0.0",
  "jupyterlab-code-formatter>=2.2.0,<3.0.0",
]

# Monitoring dependencies (for production)
monitoring = [
  "prometheus-client>=0.19.0,<1.0.0",
  "opentelemetry-api>=1.22.0,<2.0.0",
  "opentelemetry-sdk>=1.22.0,<2.0.0",
  "opentelemetry-instrumentation-fastapi>=0.43b0",
  "evidently>=0.4.0,<1.0.0",
]

# All dependencies
all = [
  "fraud-detection[dev,notebook,monitoring]",
]

[project.urls]
Homepage = "https://github.com/yourusername/fraud-detection"
Documentation = "https://yourusername.github.io/fraud-detection"
Repository = "https://github.com/yourusername/fraud-detection"
"Bug Tracker" = "https://github.com/yourusername/fraud-detection/issues"

[project.scripts]
fraud-detection = "src.cli:main"
train-model = "src.pipeline.training_pipeline:main"
evaluate-model = "src.evaluation.evaluate:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
# directories
\.eggs
| \.git
| \.hg
| \.mypy_cache
| \.tox
| \.venv
| build
| dist
| mlruns
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
fix = true
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "F",    # pyflakes
  "I",    # isort
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "UP",   # pyupgrade
  "ARG",  # flake8-unused-arguments
  "SIM",  # flake8-simplify
]
ignore = [
  "E501",  # line too long (handled by black)
  "B008",  # do not perform function calls in argument defaults
  "B904",  # raise from
  "SIM105", # contextlib.suppress
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG", "S101"]

[tool.ruff.isort]
known-third-party = ["mlflow", "optuna", "pandas", "numpy", "sklearn"]

# Mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
  "-ra",
  "--strict-markers",
  "--cov=src",
  "--cov-branch",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=html",
  "--cov-report=xml",
  "--cov-fail-under=80",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__init__.py",
  "*/conftest.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if TYPE_CHECKING:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "@abstract",
  "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
known_third_party = ["mlflow", "optuna", "pandas", "numpy", "sklearn"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
import_heading_stdlib = "Standard library imports"
import_heading_thirdparty = "Third-party imports"
import_heading_firstparty = "First-party imports"
import_heading_localfolder = "Local imports"
force_single_line = false
use_parentheses = true
ensure_newline_before_comments = true
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0

# Bandit configuration
[tool.bandit]
targets = ["src"]
skips = ["B101", "B301"]